// 인라인 함수와 함수 포인터의 이야기

// inline: 최적화 명령입니다. /Ob1
// 1. 인라인은 컴파일 시간 문법입니다.
// 2. 인라인 함수라도 함수 포인터에 담아서 호출하면 인라인 치환 될 수 없다.
//		(함수 포인터는 결국 변수이다. 실행시간에 변경될 수 있다.)

// /Ob1~3 컴파일러 옵션 필요, Ob1: 사용자가 inline한 것만 최적화, Ob2~3는 알아서 최적화
// gcc에서는 /O2 하면 돼. inline한 것도 최적화하고 안 한것도 알아서 최적화
// inline 장점: 함수가 적당히 짧으면 기계어도 짧아지고 간단해진다.

// 결과적으로 4_함수와전략.cpp 에서 사용한 inline bool cmp1은 인라인 치환되지 못 한다!! -> 성능 저하

int add1(int a, int b) { return a + b; }
inline int add2(int a, int b) { return a + b; }

int main()
{
	int n1 = add1(10, 20);	// 호출
	int n2 = add2(10, 20);	// 치환? 기계어 까보니 실제로는 호출을 하고 있었다.

	int(*f)(int, int) = &add2;
	f(10, 20);	// 호출, 치환? 함수 포인터에 담아서 사용하면 호출이 된다.
}
